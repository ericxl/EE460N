#include "stdafx.h"
#include "CppUnitTest.h"
#include "../lc3bsim3.c"
using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace UnitTest
{
	void AssertArrayEquals(const int* expected, const int* actual, const int size);

	TEST_CLASS(MicroSequencerUnitTest)
	{
	public:
		TEST_METHOD_INITIALIZE(Initialize)
		{
			init_memory();
			init_control_store("C:\\depot\\EE460N\\ee460n-proj3\\ucode3.txt");
		}

		TEST_METHOD(MSTest1)
		{
			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x0;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0xC], CONTROL_STORE_BITS);
		}

		TEST_METHOD(MSTest2)
		{
			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.READY = 1;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1011], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.READY = 1;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1011], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.READY = 0;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1011], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.READY = 0;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1001], CONTROL_STORE_BITS);
		}

		TEST_METHOD(MSTest3)
		{
			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.BEN = 1;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1101], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.BEN = 1;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1101], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.BEN = 0;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1001], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.BEN = 0;
			CURRENT_LATCHES.IR = 0xC301;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1101], CONTROL_STORE_BITS);
		}

		TEST_METHOD(MSTest4)
		{
			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.IR = 0b1010100000000000;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1101], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.IR = 0b1010100000000000;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b11101], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.IR = 0b1010000000000000;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1001], CONTROL_STORE_BITS);

			CURRENT_LATCHES.MICROINSTRUCTION[IRD] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND0] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[COND1] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J0] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J1] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J2] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J3] = 0x1;
			CURRENT_LATCHES.MICROINSTRUCTION[J4] = 0x0;
			CURRENT_LATCHES.MICROINSTRUCTION[J5] = 0x0;
			CURRENT_LATCHES.IR = 0b1010000000000000;
			eval_micro_sequencer();
			AssertArrayEquals(NEXT_LATCHES.MICROINSTRUCTION, CONTROL_STORE[0b1100], CONTROL_STORE_BITS);
		}
	};

	TEST_CLASS(CycleMemoryUnitTest)
	{
	public:
		TEST_METHOD_INITIALIZE(Initialize)
		{
			init_memory();
			init_control_store("C:\\depot\\EE460N\\ee460n-proj3\\ucode3.txt");
			CURRENT_LATCHES.MICROINSTRUCTION[MIO_EN] = 1;
		}

		TEST_METHOD(CMTest1)
		{
			current_mem_cycle = MEM_CYCLES;
			CURRENT_LATCHES.MICROINSTRUCTION[R_W] = 0;
			CURRENT_LATCHES.MAR = 32;
			MEMORY[16][0] = 0x0033;
			MEMORY[16][1] = 0x0077;
			cycle_memory();
			Assert::AreEqual(0x7733, wordFromMem);

			current_mem_cycle = MEM_CYCLES;
			CURRENT_LATCHES.MICROINSTRUCTION[R_W] = 0;
			CURRENT_LATCHES.MAR = 32;
			MEMORY[16][0] = 0x9933;
			MEMORY[16][1] = 0x9977;
			cycle_memory();
			Assert::AreEqual(0x7733, wordFromMem);
		}

		TEST_METHOD(CMTest2)
		{
			current_mem_cycle = MEM_CYCLES;
			CURRENT_LATCHES.MICROINSTRUCTION[R_W] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[DATA_SIZE] = 0;
			CURRENT_LATCHES.MAR = 32;
			CURRENT_LATCHES.MDR = 0x11119977;
			MEMORY[16][0] = 0x5555;
			MEMORY[16][1] = 0x6666;
			cycle_memory();
			Assert::AreEqual(0x77, MEMORY[16][0]);

			current_mem_cycle = MEM_CYCLES;
			CURRENT_LATCHES.MICROINSTRUCTION[R_W] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[DATA_SIZE] = 0;
			CURRENT_LATCHES.MAR = 33;
			CURRENT_LATCHES.MDR = 0x11119977;
			MEMORY[16][0] = 0x5555;
			MEMORY[16][1] = 0x6666;
			cycle_memory();
			Assert::AreEqual(0x77, MEMORY[16][1]);
		}

		TEST_METHOD(CMTest3)
		{
			current_mem_cycle = MEM_CYCLES;
			CURRENT_LATCHES.MICROINSTRUCTION[R_W] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[DATA_SIZE] = 1;
			CURRENT_LATCHES.MAR = 32;
			CURRENT_LATCHES.MDR = 0x11112413;
			MEMORY[16][0] = 0x5555;
			MEMORY[16][1] = 0x6666;
			cycle_memory();
			Assert::AreEqual(0x13, MEMORY[16][0]);
			Assert::AreEqual(0x24, MEMORY[16][1]);

			current_mem_cycle = MEM_CYCLES;
			CURRENT_LATCHES.MICROINSTRUCTION[R_W] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[DATA_SIZE] = 1;
			CURRENT_LATCHES.MAR = 32;
			CURRENT_LATCHES.MDR = 0x1111CDEF;
			MEMORY[16][0] = 0x5555;
			MEMORY[16][1] = 0x6666;
			cycle_memory();
			Assert::AreEqual(0xEF, MEMORY[16][0]);
			Assert::AreEqual(0xCD, MEMORY[16][1]);
		}
	};

	TEST_CLASS(BusDriverUnitTest)
	{
	public:
		TEST_METHOD_INITIALIZE(Initialize)
		{
			init_memory();
		}

		TEST_METHOD(BDALUTestAdd1)
		{
			//add neg
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF63E;
			CURRENT_LATCHES.REGS[3] = 118;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(116, aluVal);

			//add neg
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF63E;
			CURRENT_LATCHES.REGS[3] = 0xFFFF;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(0xFFFD, aluVal);

			//add pos
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF62E;
			CURRENT_LATCHES.REGS[3] = 118;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(118+14, aluVal);
		}

		TEST_METHOD(BDALUTestAdd2)
		{
			//add neg
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF61E;
			CURRENT_LATCHES.REGS[3] = 0xFFFF;
			CURRENT_LATCHES.REGS[6] = 0xFFFF;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(0xFFFE, aluVal);

			//add pos
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF60E;
			CURRENT_LATCHES.REGS[3] = 23;
			CURRENT_LATCHES.REGS[6] = 7;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(30, aluVal);
		}

		TEST_METHOD(BDALUTestAnd1)
		{
			//and neg
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF63A;
			CURRENT_LATCHES.REGS[3] = 0b1010000011111110;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(0b1010000011111010, aluVal);

			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF62A;
			CURRENT_LATCHES.REGS[3] = 0b1010000011111110;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(0b000000000001010, aluVal);
		}

		TEST_METHOD(BDALUTestAnd2)
		{
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF60E;
			CURRENT_LATCHES.REGS[3] = 0b1010001011111110;
			CURRENT_LATCHES.REGS[6] = 0b1010011101100110;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 1;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 0;
			eval_bus_drivers();
			Assert::AreEqual(0b1010001001100110, aluVal);
		}

		TEST_METHOD(BDALUTestXor1)
		{
			//xor neg
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF63A;
			CURRENT_LATCHES.REGS[3] = 0b1010000011111110;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 1;
			eval_bus_drivers();
			Assert::AreEqual(0b0101111100000100, aluVal);

			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF62A;
			CURRENT_LATCHES.REGS[3] = 0b1010000011111110;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 1;
			eval_bus_drivers();
			Assert::AreEqual(0b1010000011110100, aluVal);
		}

		TEST_METHOD(BDALUTestXor2)
		{
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xF60E;
			CURRENT_LATCHES.REGS[3] = 0b1010001011111110;
			CURRENT_LATCHES.REGS[6] = 0b1010011101100110;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK0] = 0;
			CURRENT_LATCHES.MICROINSTRUCTION[ALUK1] = 1;
			eval_bus_drivers();
			Assert::AreEqual(0b0000010110011000, aluVal);
		}

		TEST_METHOD(BDSHFTest1)
		{
			//lshf
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xD003;
			CURRENT_LATCHES.REGS[0] = 0b1010000011010001;
			eval_bus_drivers();
			Assert::AreEqual(0b0000011010001000, shfVal);
		}

		TEST_METHOD(BDSHFTest2)
		{
			//lshf
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xD013;
			CURRENT_LATCHES.REGS[0] = 0b1010000011010001;
			eval_bus_drivers();
			Assert::AreEqual(0b0001010000011010, shfVal);
		}

		TEST_METHOD(BDSHFTest3)
		{
			//lshf
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xD033;
			CURRENT_LATCHES.REGS[0] = 0b1010000011010001;
			eval_bus_drivers();
			Assert::AreEqual(0b1111010000011010, shfVal);

			//lshf
			CURRENT_LATCHES.MICROINSTRUCTION[SR1MUX] = 1;
			CURRENT_LATCHES.IR = 0xD033;
			CURRENT_LATCHES.REGS[0] = 0b0010000011010001;
			eval_bus_drivers();
			Assert::AreEqual(0b0000010000011010, shfVal);
		}

		TEST_METHOD(BDMARMUXTest1)
		{
			//
			CURRENT_LATCHES.MICROINSTRUCTION[MARMUX] = 0;
			CURRENT_LATCHES.IR = 0b1111111110101010;
			eval_bus_drivers();
			Assert::AreEqual(0b0000000101010100, marMuxVal);

			CURRENT_LATCHES.MICROINSTRUCTION[MARMUX] = 0;
			CURRENT_LATCHES.IR = 0b1111111100101111;
			eval_bus_drivers();
			Assert::AreEqual(0b0000000001011110, marMuxVal);
		}

		TEST_METHOD(BDMARMUXTest2)
		{
			//
			CURRENT_LATCHES.MICROINSTRUCTION[MARMUX] = 1;
			CURRENT_LATCHES.IR = 0b1111111110101010;
			eval_bus_drivers();
			Assert::AreEqual(0b0000000101010100, marMuxVal);
		}
	};

	void AssertArrayEquals(const int* expected, const int* actual, const int size)
	{
		for (auto i = 0; i < size; i++)
		{
			Assert::AreEqual(*(expected + i), *(actual + i));
		}
	}
}


